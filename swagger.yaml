openapi: 3.0.0
info:
  title: Twitter-Retro API
  version: 1.0.0
  description: API de Twitter Retro en développement...

paths:
  /auth/register:
    post:
      summary: Enregistrement d'un nouvel utilisateur
      description: Permet à un utilisateur de s'enregistrer dans le système.
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  description: Id tag de l'utilisateur.
                fullName:
                  type: string
                  description: Nom de l'utilisateur.
                email:
                  type: string
                  format: email
                  description: Adresse e-mail de l'utilisateur.
                password:
                  type: string
                  format: password
                  description: Mot de passe de l'utilisateur.
                picturePath:
                  type: string
                  description: Chemin de l'image de profil de l'utilisateur.
                friends:
                  type: array
                  items:
                    type: string
                  description: Liste d'amis de l'utilisateur.
      responses:
        "201":
          description: Utilisateur créé avec succès
        "400":
          description: Adresse e-mail déjà utilisée
        "500":
          description: Erreur Interne
  /auth/login:
    post:
      summary: Connexion de l'utilisateur
      description: Cette route permet à un utilisateur existant de se connecter au système.
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: L'adresse e-mail de l'utilisateur.
                password:
                  type: string
                  format: password
                  description: Le mot de passe de l'utilisateur.
      responses:
        "200":
          description: Connexion réussie
        "401":
          description: Mot de passe ou e-mail incorrect
        "500":
          description: Erreur Interne
  /auth/forgot-password:
    post:
      summary: Demande de réinitialisation de mot de passe
      description: Permet à un utilisateur d'initier le processus de réinitialisation de mot de passe en demandant un e-mail de réinitialisation.
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: L'adresse e-mail de l'utilisateur.
      responses:
        "200":
          description: Email de réinitialisation envoyé avec succès
        "404":
          description: Utilisateur non trouvé
        "500":
          description: Erreur Interne
  /auth/reset-password:
    post:
      summary: Réinitialisation de mot de passe
      description: Permet à un utilisateur de réinitialiser son mot de passe à l'aide du token de réinitialisation.
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Le token de réinitialisation de mot de passe.
                newPassword:
                  type: string
                  format: password
                  description: Le nouveau mot de passe de l'utilisateur.
      responses:
        "200":
          description: Mot de passe réinitialisé avec succès
        "400":
          description: Token invalide ou expiré
        "500":
          description: Erreur Interne
  /auth/logout:
    post:
      summary: Déconnexion de l'utilisateur
      description: Cette route permet à un utilisateur connecté de se déconnecter du système.
      tags:
        - Authentification
      responses:
        "403":
          description: Accès interdit
        "200":
          description: Déconnexion réussie
        "500":
          description: Erreur Interne
  /users/{id}:
    post:
      summary: Get a user by ID
      description: Retrieves user information based on their ID
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        "200":
          description: User retrieved successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    patch:
      summary: Update a user
      description: Updates user information based on their ID
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
        - name: body
          in: body
          description: Data to update for the user
          required: true
          schema:
            $ref: '#/components/schemas/User'
      responses:
        "200":
          description: User updated successfully
        "401":
          description: Unauthorized - User not authenticated
        "404":
          description: User not found  
        "500":
          description: Internal Server Error
  /users/follow/{id}:
    post:
      summary: Follow a user
      description: Follow another user on the platform.
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to follow.
          schema:
            type: string
      responses:
        "200":
          description: User followed successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error

  /users/unfollow/{id}:
    post:
      summary: Unfollow a user
      description: Unfollow a user on the platform.
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to unfollow.
          schema:
            type: string
      responses:
        "200":
          description: User unfollowed successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error        
 
  /tweets:
    get:
      summary: Retrieve all tweets
      description: Get a list of all tweets in the system
      tags: 
        - Tweets
      parameters:
        - name: Auth
          in: header
          description: Bearer token
          required: true
          
          type: string 
        - name: page
          in: query
          description: number of the Page to retrieve (default: 1)
          required: false
          schema:
            type: integer
            minimum: 1
        - name: pageSize
          in: query
          description: Number of tweets per page (default: 20)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: skip
          in: query
          description: Number of tweets to skip per page (default: 0)
          required: false
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: A list of tweets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tweet'
    post:
      summary: Create a new tweet
      description: Create a new tweet in the system
      parameters:
        - name: Auth
          in: header
          description: Bearer token
          required: true 
      tags: 
        - Tweets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tweet'
      responses:
        '201':
          description: The created tweet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'

  /tweets/{tweetId}:
    get:
      summary: Retrieve a specific tweet
      description: Get information about a specific tweet by its ID
      tags: 
        - Tweets

      parameters:
        - name: Auth
          in: header
          description: Bearer token
          required: true
        - name: tweetId
          in: path
          required: true
          description: The ID of the tweet to retrieve
          schema:
            type: string
      responses:
        '200':
          description: The requested tweet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
    patch:
      summary: Update a specific tweet
      description: Update an existing tweet by its ID
      tags: 
        - Tweets
      parameters:
        - name: Auth
          in: header
          description: Bearer token
          required: true
        - name: tweetId
          in: path
          required: true
          description: The ID of the tweet to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tweet'
      responses:
        '200':
          description: The updated tweet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
    delete:
      summary: Delete a specific tweet
      description: Delete a tweet from the system by its ID
      tags: 
        - Tweets
      parameters:
        - name: Auth
          in: header
          description: Bearer token
          required: true
        - name: tweetId
          in: path
          required: true
          description: The ID of the tweet to delete
          schema:
            type: string
      responses:
        '204':
          description: Tweet deleted successfully
  /tweets/{tweetId}/like:
    post:
      summary: Like a tweet
      description: Like a tweet by its ID
      tags:
        - Tweets
      parameters:
        - name: Auth
          in: header
          description: Bearer token
          required: true
        - name: tweetId
          in: path
          description: The ID of the tweet to like
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tweet liked successfully
        '401':
          description: Unauthorized - User not authenticated
        '404':
          description: Tweet not found
        '500':
          description: Internal Server Error

  /tweets/{tweetId}/unlike:
    post:
      summary: Unlike a tweet
      description: Unlike a tweet by its ID
      tags:
        - Tweets
      parameters:
        - name: Auth
          in: header
          description: Bearer token
          required: true
        - name: tweetId
          in: path
          description: The ID of the tweet to unlike
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tweet unliked successfully
        '401':
          description: Unauthorized - User not authenticated
        '404':
          description: Tweet not found
        '500':
          description: Internal Server Error

  /tweets/{tweetId}/retweet:
    post:
      summary: Retweet a tweet
      description: Retweet a tweet by its ID
      tags:
        - Tweets
      parameters:
        - name: Auth
          in: header
          description: Bearer token
          required: true
        - name: tweetId
          in: path
          description: The ID of the tweet to retweet
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tweet retweeted successfully
        '401':
          description: Unauthorized - User not authenticated
        '404':
          description: Tweet not found
        '500':
          description: Internal Server Error

  /tweets/{tweetId}/unretweet:
    post:
      summary: Unretweet a tweet
      description: Unretweet a tweet by its ID
      tags:
        - Tweets
      parameters:
        - name: Auth
          in: header
          description: Bearer token
          required: true
        - name: tweetId
          in: path
          description: The ID of the tweet to unretweet
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tweet unretweeted successfully
        '401':
          description: Unauthorized - User not authenticated
        '404':
          description: Tweet not found
        '500':
          description: Internal Server Error

  /tweets/{tweetId}/bookmark:
    post:
      summary: Bookmark a tweet
      description: Bookmark a tweet by its ID
      tags:
        - Tweets
      parameters:
        - name: Auth
          in: header
          description: Bearer token
          required: true
        - name: tweetId
          in: path
          description: The ID of the tweet to bookmark
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tweet bookmarked successfully
        '401':
          description: Unauthorized - User not authenticated
        '404':
          description: Tweet not found
        '500':
          description: Internal Server Error

  /tweets/{tweetId}/unbookmark:
    post:
      summary: Unbookmark a tweet
      description: Unbookmark a tweet by its ID
      tags:
        - Tweets
      parameters:
        - name: Auth
          in: header
          description: Bearer token
          required: true
        - name: tweetId
          in: path
          description: The ID of the tweet to unbookmark
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tweet unbookmarked successfully
        '401':
          description: Unauthorized - User not authenticated
        '404':
          description: Tweet not found
        '500':
          description: Internal Server Error         
          
  /images/profile/{tag}:
    get:
      tags: 
        - Images
      summary: Retrieve user's profile image
      parameters:
        - name: tag
          in: path
          description: Tag of the user whose profile image you want to retrieve
          required: true
          type: string
      responses:
        '200':
          description: Profile image retrieved successfully
          schema:
            type: string
            format: binary
        '404':
          description: User not found
  /images/banner/{tag}:
    get:
      tags: 
        - Images
      summary: Retrieve user's banner image
      parameters:
        - name: tag
          in: path
          description: Tag of the user whose banner image you want to retrieve
          required: true
          type: string
      responses:
        '200':
          description: Banner image retrieved successfully
          schema:
            type: string
            format: binary
        '404':
          description: User not found
  /images/post/{id}:
    get:
      tags: 
        - Images
      summary: Retrieve images associated with a post
      parameters:
        - name: id
          in: path
          description: ID of the post whose images you want to retrieve
          required: true
          type: string
      responses:
        '200':
          description: Post images retrieved successfully
          schema:
            type: object
            properties:
              files:
                type: array
                items:
                  type: string
            example:
              files: ["image1.jpg", "image2.jpg"]
  /images/banner:
    post:
      tags: 
        - Images
      summary: Upload a banner
      responses:
        '200':
          description: banner images uploaded successfully
          schema:
            type: object
            properties:
              files:
                type: array
                items:
                  type: string
            example:
              files: ["image1.jpg", "image2.jpg"]
  /messages/chat/:
    post:
      tags: 
        - Messages
      summary: Open a message session
      responses:
        '200':
          description: Open session success
  /messages/chat/:
    get:
      tags: 
        - Messages
      summary: Get user messages session
      responses:
        '200':
          description: Get success
  /messages/chat/group:
    post:
      tags: 
        - Messages
      summary: Create a group of users
      responses:
        '200':
          description: create success
  /messages/chat/rename:
    put:
      tags: 
        - Messages
      summary: Rename un groupe
      responses:
        '200':
          description: rename success
  /messages/chat/grouperemove:
    put:
      tags: 
        - Messages
      summary: delete a user from a group
      responses:
        '200':
          description: delete success
  /messages/chat/groupeadd:
    put:
      tags: 
        - Messages
      summary: add a user from a group
      responses:
        '200':
          description: add success
  /api/messages:
    post:
      tags: 
        - Messages
      summary: send a message
      responses:
        '200':
          description: send success
  /api/messages/{chatId}:
    post:
      tags: 
        - Messages
      summary: get list of messages from chat 
      responses:
        '200':
          description: get success


              

components:
  schemas:
    User:
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        _id:
          type: string
          description: L'identifiant unique de l'utilisateur.
        tag:
          type: string
          description: Id tag de l'utilisateur..
        fullName:
          type: string
          description: Nom de l'utilisateur.
        email:
          type: string
          format: email
          description: L'adresse e-mail de l'utilisateur.
        password:
          type: string
          description: Le mot de passe de l'utilisateur.
        picturePath:
          type: string
          description: Le chemin de l'image de profil de l'utilisateur.
        friends:
          type: array
          description: La liste des amis de l'utilisateur.
          items:
            type: string
        followers:
          type: array
          description: La liste des abonnés de l'utilisateur.
          items:  
            type: string
        following: 
          type: array   
          description: La liste des abonnés de l'utilisateur.
          items:  
            type: string

    ResetToken:
      type: object
      properties:
        token:
          type: string
          description: The reset token received in the password reset email.
        expires:
          type: integer
          format: int64
          description: The expiry timestamp of the reset token.
        id:
          type: string
          description: The ID of the user associated with the reset token.

    Tweet:
      type: object
      properties:
        body:
          type: string
        type:
          type: string
          enum:
            - tweet
            - reply
            - retweet
          required: true
        originalTweet:
          type: string
          format: uuid
        retweets:
          type: array
          items:
            type: string
            format: uuid
        author:
          type: string
          format: uuid
        likes:
          type: array
          items:
            type: string
            format: uuid
        replies:
          type: array
          items:
            type: string
            format: uuid
      required:
        - type
